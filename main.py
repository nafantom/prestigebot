from telebot import *
from telebot.types import *
from configs import *
from database import *
from keyboards import *


bot = telebot.TeleBot(TOKEN)
user_data = {}

@bot.message_handler(commands=['start'])
def start(message: Message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –±–æ—Ç–µ –Ω–∞—à–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞üòä.\n'
                              '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –ø–ª–∞—Ç–Ω—ã–π –º–æ–∫ —Ç–µ—Å—Ç - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚¨á',
                     reply_markup=generate_registration())

@bot.message_handler(func=lambda message: '–û –Ω–∞—Å‚Ñπ' == message.text)
def info(message: Message):
    chat_id = message.chat.id
    bot.send_message(chat_id, f'–ù–∞—à —Ü–µ–Ω—Ç—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ß–∏–ª–∞–Ω–∑–∞—Ä—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ –≥.–¢–∞—à–∫–µ–Ω—Ç.\n'
                              f'–û—Ä–∏–µ–Ω—Ç–∏—Ä: –º–µ—Ç—Ä–æ –ú–∏—Ä–∑–æ –£–ª—É–≥–±–µ–∫, —Ç–µ–∞—Ç—Ä –û–ø–µ—Ä–µ—Ç–∞\n'
                              f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-20:00 —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ —Å—É–±–±–æ—Ç—É.\n'
                             f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: +998-95-227-99-00\n'
                              f'          +998-97-725-01-99'
                              )
    bot.send_message(chat_id, 'https://maps.app.goo.gl/ENzBnai3BHFMo7PH7')


@bot.message_handler(func=lambda message: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –º–æ–∫' == message.text)
def ask_full_name(message: Message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é: ', reply_markup=None)
    bot.register_next_step_handler(msg, ask_phone_number)


def ask_phone_number(message: Message):
    global user_data
    chat_id = message.chat.id
    full_name = message.text
    user_data['full_name'] = full_name
    msg = bot.send_message(chat_id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç: ', reply_markup=generate_contact())
    bot.register_next_step_handler(msg, ask_date)

def ask_date(message: Message):
    global user_data
    chat_id = message.chat.id
    phone_number = message.contact.phone_number
    user_data['phone_number'] = phone_number
    msg = bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:')
    bot.register_next_step_handler(msg, ask_time)

def ask_time(message: Message):
    global user_data
    chat_id = message.chat.id
    date = message.text
    user_data['date'] = date
    msg = bot.send_message(chat_id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: ', reply_markup=generate_time())
    bot.register_next_step_handler(msg, end_register)

def end_register(message: Message):
    global user_data
    chat_id = message.chat.id
    time = message.text
    user_data['time'] = time
    bot.send_message(chat_id, f'''
–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {user_data['full_name']}    
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone_number']}
–î–∞—Ç–∞: {user_data['date']}
–í—Ä–µ–º—è: {user_data['time']}
''', reply_markup=generate_yes_no())

@bot.callback_query_handler(func=lambda call: 'yes' == call.data)
def submit_registration(call: CallbackQuery):
    global users
    chat_id = call.message.chat.id

    database = sqlite3.connect('users.db')
    cursor = database.cursor()

    cursor.execute('''
INSERT INTO users(telegram_id, full_name, phone_number, date, time) 
VALUES (?, ?, ?, ?, ?) 
    ''', (chat_id, user_data['full_name'], user_data['phone_number'], user_data['date'], user_data['time']))

    bot.send_message(chat_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –º–æ–∫ —Ç–µ—Å—Ç!üòÅ'
                              f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n'
                              f'–ò–º—è:\t {user_data['full_name']}\n'
                              f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\t {user_data['phone_number']}\n'
                              f'–î–∞—Ç–∞ –º–æ–∫ —Ç–µ—Å—Ç–∞:\t {user_data['date']}\n'
                              f'–í—Ä–µ–º—è:\t {user_data['time']}\n'
                              f'–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ 150 —Ç—ã—Å—á —Å—É–º –∑–∞ –º–æ–∫ —Ç–µ—Å—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ —É –Ω–∞—Å –≤ –æ—Ñ–∏—Å–µ –≤ –¥–µ–Ω—å —Ç–µ—Å—Ç–∞.\n'
                              f'–ü—Ä–æ—Å–∏–º –≤–∞—Å –ø—Ä–∏–π—Ç–∏ –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞, —á—Ç–æ –±—ã —É—Å–ø–µ—Ç—å –≤–æ–≤—Ä–µ–º—è –∑–∞–π—Ç–∏ –Ω–∞ –Ω–µ–≥–æ.\n'
                              f'Good LucküòâüçÄ'
                              )

    bot.send_message(GROUP_ID, f'–ü–ª–∞—Ç–Ω—ã–π –º–æ–∫:\n'
                               f'–ò–º—è:\t {user_data['full_name']}\n'
                              f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\t {user_data['phone_number']}\n'
                              f'–î–∞—Ç–∞ –º–æ–∫ —Ç–µ—Å—Ç–∞:\t {user_data['date']}\n'
                              f'–í—Ä–µ–º—è:\t {user_data['time']}')
    database.commit()
    database.close()
    user_data.clear()


@bot.callback_query_handler(func=lambda call: 'no' == call.data)
def unsubmit_registration(call: CallbackQuery):
    chat_id = call.message.chat.id
    msg = bot.send_message(chat_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!')
    bot.register_next_step_handler(msg, reply_markup=generate_registration())


bot.polling(none_stop=True)